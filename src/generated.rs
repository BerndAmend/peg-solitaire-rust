// generated
use board::{Board, State, EMPTY_STATE};

//Name: English
pub struct EnglishBoard;
impl Board for EnglishBoard {
const PEGS: usize = 33;
const SIZE: usize = 38;
const MOVEMASK: &'static [State] = &[7516192768u64, 4848615424u64, 2424307712u64, 1212153856u64, 939524096u64, 
                            553779200u64, 276889600u64, 138444800u64, 117440512u64, 67637248u64, 58720256u64, 
                            33818624u64, 29360128u64, 16909312u64, 14680064u64, 8454656u64, 7340032u64, 
                            4227328u64, 2113664u64, 1056832u64, 917504u64, 458752u64, 229376u64, 132128u64, 
                            114688u64, 66064u64, 57344u64, 33032u64, 7168u64, 3584u64, 1792u64, 1060u64, 
                            896u64, 530u64, 448u64, 265u64, 56u64, 7u64];
const CHECKMASK1: &'static [State] = &[6442450944u64, 4831838208u64, 2415919104u64, 1207959552u64, 805306368u64, 
                            553648128u64, 276824064u64, 138412032u64, 100663296u64, 67633152u64, 50331648u64, 
                            33816576u64, 25165824u64, 16908288u64, 12582912u64, 8454144u64, 6291456u64, 
                            4227072u64, 2113536u64, 1056768u64, 786432u64, 393216u64, 196608u64, 132096u64, 
                            98304u64, 66048u64, 49152u64, 33024u64, 6144u64, 3072u64, 1536u64, 1056u64, 
                            768u64, 528u64, 384u64, 264u64, 48u64, 6u64];
const CHECKMASK2: &'static [State] = &[3221225472u64, 553648128u64, 276824064u64, 138412032u64, 402653184u64, 
                            16908288u64, 8454144u64, 4227072u64, 50331648u64, 528384u64, 25165824u64, 
                            264192u64, 12582912u64, 132096u64, 6291456u64, 66048u64, 3145728u64, 33024u64, 
                            16512u64, 8256u64, 393216u64, 196608u64, 98304u64, 1056u64, 49152u64, 528u64, 
                            24576u64, 264u64, 3072u64, 1536u64, 768u64, 36u64, 384u64, 18u64, 192u64, 
                            9u64, 24u64, 3u64];

fn normalize(state: State) -> State {
    use std::cmp::min;
    let p0 = (state & 133169152u64) >> 14 | (state & 56u64) << 24 | (state & 939524096u64) >> 24 | (state & 8128u64) << 14
             | (state & 7516192768u64) >> 30 | (state & 1040384u64) | (state & 7u64) << 30;
    let p1 = (state & 4848747556u64) >> 2 | (state & 1212186889u64) << 2 | (state & 33818624u64) >> 4 | (state & 67637248u64) >> 6
             | (state & 1056832u64) << 6 | (state & 2424373778u64) | (state & 2113664u64) << 4;
    let p2 = (state & 8388608u64) >> 14 | (state & 16u64) << 24 | (state & 4u64) << 28 | (state & 268435456u64) >> 24
             | (state & 32768u64) << 2 | (state & 1024u64) << 12 | (state & 67108864u64) >> 20 | (state & 4294967296u64) >> 32
             | (state & 262144u64) >> 4 | (state & 32u64) << 22 | (state & 524288u64) >> 6 | (state & 8192u64) << 6
             | (state & 536870912u64) >> 26 | (state & 8u64) << 26 | (state & 1u64) << 32 | (state & 1073741824u64) >> 28
             | (state & 64u64) << 20 | (state & 1048576u64) >> 8 | (state & 33554432u64) >> 18 | (state & 128u64) << 18
             | (state & 2097152u64) >> 10 | (state & 131072u64) >> 2 | (state & 134217728u64) >> 22 | (state & 2048u64) << 10
             | (state & 512u64) << 14 | (state & 2147483648u64) >> 30 | (state & 4194304u64) >> 12 | (state & 16777216u64) >> 16
             | (state & 65536u64) | (state & 4096u64) << 8 | (state & 256u64) << 16 | (state & 2u64) << 30
             | (state & 16384u64) << 4;
    let p3 = (state & 1074790400u64) >> 18 | (state & 268451840u64) >> 10 | (state & 4100u64) << 18 | (state & 525314u64) << 12
             | (state & 262160u64) << 10 | (state & 536871040u64) >> 4 | (state & 4303388736u64) >> 6
             | (state & 2151686144u64) >> 12 | (state & 67240449u64) << 6 | (state & 136314880u64) >> 16
             | (state & 16843008u64) | (state & 2080u64) << 16 | (state & 33554440u64) << 4;
    let p4 = (state & 545259520u64) >> 8 | (state & 272629760u64) >> 14 | (state & 4u64) << 24 | (state & 16384u64) >> 10
             | (state & 2050u64) << 18 | (state & 2149580800u64) >> 18 | (state & 1073741824u64) >> 24
             | (state & 16777344u64) >> 2 | (state & 33554688u64) << 2 | (state & 524289u64) << 12 | (state & 262144u64) << 10
             | (state & 1040u64) << 14 | (state & 135266304u64) >> 20 | (state & 64u64) >> 4 | (state & 4294975488u64) >> 12
             | (state & 32768u64) >> 6 | (state & 131072u64) << 6 | (state & 65536u64) | (state & 520u64) << 8
             | (state & 67108864u64) << 4 | (state & 4128u64) << 20;
    let p5 = (state & 17039360u64) >> 14 | (state & 133120u64) >> 8 | (state & 64u64) << 24 | (state & 537395200u64) >> 18
             | (state & 8200u64) << 18 | (state & 268435456u64) >> 10 | (state & 67108864u64) >> 24 | (state & 134218752u64) >> 2
             | (state & 4194336u64) << 2 | (state & 1048578u64) << 12 | (state & 16640u64) << 14 | (state & 16u64) << 10
             | (state & 4328521728u64) >> 20 | (state & 1073741824u64) >> 4 | (state & 2147487744u64) >> 12
             | (state & 8388608u64) >> 6 | (state & 512u64) << 6 | (state & 65536u64) | (state & 2129920u64) << 8
             | (state & 4u64) << 4 | (state & 129u64) << 20;
    let p6 = (state & 268697600u64) >> 14 | (state & 8519680u64) >> 8 | (state & 1073745920u64) >> 10 | (state & 2148007936u64) >> 18
             | (state & 8194u64) << 18 | (state & 570425344u64) >> 22 | (state & 1048580u64) << 10 | (state & 16400u64) << 14
             | (state & 136u64) << 22 | (state & 134219776u64) >> 6 | (state & 2097184u64) << 6 | (state & 4362076160u64) >> 26
             | (state & 16777216u64) >> 16 | (state & 4260864u64) | (state & 65u64) << 26 | (state & 33280u64) << 8
             | (state & 256u64) << 16;
    min(min(min(state,p0), min(p1, p2)), min(min(p3, p4), min(p5, p6)))
}


fn equivalent_fields(state: State) -> [State; 8] {
    let mut n = [EMPTY_STATE; 8];
    n[0] = state;
    n[1] = (state & 133169152u64) >> 14 | (state & 56u64) << 24 | (state & 939524096u64) >> 24 | (state & 8128u64) << 14
             | (state & 7516192768u64) >> 30 | (state & 1040384u64) | (state & 7u64) << 30;
    n[2] = (state & 4848747556u64) >> 2 | (state & 1212186889u64) << 2 | (state & 33818624u64) >> 4 | (state & 67637248u64) >> 6
             | (state & 1056832u64) << 6 | (state & 2424373778u64) | (state & 2113664u64) << 4;
    n[3] = (state & 8388608u64) >> 14 | (state & 16u64) << 24 | (state & 4u64) << 28 | (state & 268435456u64) >> 24
             | (state & 32768u64) << 2 | (state & 1024u64) << 12 | (state & 67108864u64) >> 20 | (state & 4294967296u64) >> 32
             | (state & 262144u64) >> 4 | (state & 32u64) << 22 | (state & 524288u64) >> 6 | (state & 8192u64) << 6
             | (state & 536870912u64) >> 26 | (state & 8u64) << 26 | (state & 1u64) << 32 | (state & 1073741824u64) >> 28
             | (state & 64u64) << 20 | (state & 1048576u64) >> 8 | (state & 33554432u64) >> 18 | (state & 128u64) << 18
             | (state & 2097152u64) >> 10 | (state & 131072u64) >> 2 | (state & 134217728u64) >> 22 | (state & 2048u64) << 10
             | (state & 512u64) << 14 | (state & 2147483648u64) >> 30 | (state & 4194304u64) >> 12 | (state & 16777216u64) >> 16
             | (state & 65536u64) | (state & 4096u64) << 8 | (state & 256u64) << 16 | (state & 2u64) << 30
             | (state & 16384u64) << 4;
    n[4] = (state & 1074790400u64) >> 18 | (state & 268451840u64) >> 10 | (state & 4100u64) << 18 | (state & 525314u64) << 12
             | (state & 262160u64) << 10 | (state & 536871040u64) >> 4 | (state & 4303388736u64) >> 6
             | (state & 2151686144u64) >> 12 | (state & 67240449u64) << 6 | (state & 136314880u64) >> 16
             | (state & 16843008u64) | (state & 2080u64) << 16 | (state & 33554440u64) << 4;
    n[5] = (state & 545259520u64) >> 8 | (state & 272629760u64) >> 14 | (state & 4u64) << 24 | (state & 16384u64) >> 10
             | (state & 2050u64) << 18 | (state & 2149580800u64) >> 18 | (state & 1073741824u64) >> 24
             | (state & 16777344u64) >> 2 | (state & 33554688u64) << 2 | (state & 524289u64) << 12 | (state & 262144u64) << 10
             | (state & 1040u64) << 14 | (state & 135266304u64) >> 20 | (state & 64u64) >> 4 | (state & 4294975488u64) >> 12
             | (state & 32768u64) >> 6 | (state & 131072u64) << 6 | (state & 65536u64) | (state & 520u64) << 8
             | (state & 67108864u64) << 4 | (state & 4128u64) << 20;
    n[6] = (state & 17039360u64) >> 14 | (state & 133120u64) >> 8 | (state & 64u64) << 24 | (state & 537395200u64) >> 18
             | (state & 8200u64) << 18 | (state & 268435456u64) >> 10 | (state & 67108864u64) >> 24 | (state & 134218752u64) >> 2
             | (state & 4194336u64) << 2 | (state & 1048578u64) << 12 | (state & 16640u64) << 14 | (state & 16u64) << 10
             | (state & 4328521728u64) >> 20 | (state & 1073741824u64) >> 4 | (state & 2147487744u64) >> 12
             | (state & 8388608u64) >> 6 | (state & 512u64) << 6 | (state & 65536u64) | (state & 2129920u64) << 8
             | (state & 4u64) << 4 | (state & 129u64) << 20;
    n[7] = (state & 268697600u64) >> 14 | (state & 8519680u64) >> 8 | (state & 1073745920u64) >> 10 | (state & 2148007936u64) >> 18
             | (state & 8194u64) << 18 | (state & 570425344u64) >> 22 | (state & 1048580u64) << 10 | (state & 16400u64) << 14
             | (state & 136u64) << 22 | (state & 134219776u64) >> 6 | (state & 2097184u64) << 6 | (state & 4362076160u64) >> 26
             | (state & 16777216u64) >> 16 | (state & 4260864u64) | (state & 65u64) << 26 | (state & 33280u64) << 8
             | (state & 256u64) << 16;
    n
}
}

//Name: European
pub struct EuropeanBoard;
impl Board for EuropeanBoard {
const PEGS: usize = 37;
const SIZE: usize = 46;
const MOVEMASK: &'static [State] = &[120259084288u64, 73081552896u64, 36540776448u64, 18270388224u64, 
                            15032385536u64, 8725200896u64, 7516192768u64, 4362600448u64, 3758096384u64, 
                            2181300224u64, 1090650112u64, 545325056u64, 469762048u64, 270548992u64, 
                            234881024u64, 135274496u64, 117440512u64, 67637248u64, 58720256u64, 33818624u64, 
                            29360128u64, 16909312u64, 8454656u64, 4227328u64, 3670016u64, 1835008u64, 
                            1056896u64, 917504u64, 528448u64, 458752u64, 264224u64, 229376u64, 132112u64, 
                            66056u64, 28672u64, 14336u64, 7168u64, 4164u64, 3584u64, 2082u64, 1792u64, 
                            1041u64, 224u64, 112u64, 56u64, 7u64];
const CHECKMASK1: &'static [State] = &[103079215104u64, 73014444032u64, 36507222016u64, 18253611008u64, 
                            12884901888u64, 8724152320u64, 6442450944u64, 4362076160u64, 3221225472u64, 
                            2181038080u64, 1090519040u64, 545259520u64, 402653184u64, 270532608u64, 
                            201326592u64, 135266304u64, 100663296u64, 67633152u64, 50331648u64, 33816576u64, 
                            25165824u64, 16908288u64, 8454144u64, 4227072u64, 3145728u64, 1572864u64, 
                            1056768u64, 786432u64, 528384u64, 393216u64, 264192u64, 196608u64, 132096u64, 
                            66048u64, 24576u64, 12288u64, 6144u64, 4160u64, 3072u64, 2080u64, 1536u64, 
                            1040u64, 192u64, 96u64, 48u64, 6u64];
const CHECKMASK2: &'static [State] = &[51539607552u64, 4362076160u64, 2181038080u64, 1090519040u64, 6442450944u64, 
                            135266304u64, 3221225472u64, 67633152u64, 1610612736u64, 33816576u64, 16908288u64, 
                            8454144u64, 201326592u64, 2113536u64, 100663296u64, 1056768u64, 50331648u64, 
                            528384u64, 25165824u64, 264192u64, 12582912u64, 132096u64, 66048u64, 33024u64, 
                            1572864u64, 786432u64, 8320u64, 393216u64, 4160u64, 196608u64, 2080u64, 
                            98304u64, 1040u64, 520u64, 12288u64, 6144u64, 3072u64, 68u64, 1536u64, 34u64, 
                            768u64, 17u64, 96u64, 48u64, 24u64, 3u64];

fn normalize(state: State) -> State {
    use std::cmp::min;
    let p0 = (state & 532676608u64) >> 14 | (state & 7u64) << 34 | (state & 120259084288u64) >> 34 | (state & 32512u64) << 14
             | (state & 16642998272u64) >> 26 | (state & 4161536u64) | (state & 248u64) << 26;
    let p1 = (state & 73082081348u64) >> 2 | (state & 18270520337u64) << 2 | (state & 8725209216u64) >> 4 | (state & 270548992u64) >> 6
             | (state & 4227328u64) << 6 | (state & 36541040674u64) | (state & 545325576u64) << 4;
    let p2 = (state & 33554432u64) >> 14 | (state & 64u64) << 24 | (state & 16u64) << 28 | (state & 1073741824u64) >> 24
             | (state & 68719476736u64) >> 36 | (state & 131072u64) << 2 | (state & 34359738368u64) >> 34
             | (state & 4096u64) << 12 | (state & 268435456u64) >> 20 | (state & 1048576u64) >> 4 | (state & 17179869184u64) >> 32
             | (state & 128u64) << 22 | (state & 2097152u64) >> 6 | (state & 32768u64) << 6 | (state & 2147483648u64) >> 26
             | (state & 32u64) << 26 | (state & 4u64) << 32 | (state & 4294967296u64) >> 28 | (state & 256u64) << 20
             | (state & 4194304u64) >> 8 | (state & 2u64) << 34 | (state & 134217728u64) >> 18 | (state & 512u64) << 18
             | (state & 8388608u64) >> 10 | (state & 524288u64) >> 2 | (state & 8192u64) << 10 | (state & 2048u64) << 14
             | (state & 536870912u64) >> 22 | (state & 8589934592u64) >> 30 | (state & 1u64) << 36 | (state & 16777216u64) >> 12
             | (state & 67108864u64) >> 16 | (state & 262144u64) | (state & 16384u64) << 8 | (state & 1024u64) << 16
             | (state & 8u64) << 30 | (state & 65536u64) << 4;
    let p3 = (state & 8256u64) << 17 | (state & 68719476992u64) >> 8 | (state & 34359771136u64) >> 14 | (state & 4294967808u64) >> 5
             | (state & 134217744u64) << 5 | (state & 536870912u64) >> 22 | (state & 2097154u64) << 14
             | (state & 4096u64) << 12 | (state & 17184063488u64) >> 20 | (state & 1082130432u64) >> 17
             | (state & 128u64) << 22 | (state & 16777216u64) >> 12 | (state & 33685504u64) >> 6 | (state & 526336u64) << 6
             | (state & 8657306632u64) | (state & 2147549184u64) >> 11 | (state & 1048608u64) << 11 | (state & 268435457u64) << 8
             | (state & 16388u64) << 20;
    let p4 = (state & 8192u64) << 19 | (state & 64u64) << 21 | (state & 68736286720u64) >> 14 | (state & 16u64) << 9
             | (state & 1024u64) << 2 | (state & 2147483648u64) >> 15 | (state & 34359738368u64) >> 20
             | (state & 32u64) << 15 | (state & 16384u64) << 22 | (state & 8589934592u64) >> 4 | (state & 131328u64) >> 6
             | (state & 268959744u64) << 6 | (state & 17716740096u64) >> 26 | (state & 132u64) << 26
             | (state & 1048576u64) << 11 | (state & 2u64) << 20 | (state & 33554432u64) >> 8 | (state & 512u64) >> 3
             | (state & 67108864u64) >> 2 | (state & 4194304u64) >> 22 | (state & 2101249u64) << 14 | (state & 1073741824u64) >> 21
             | (state & 262144u64) | (state & 65536u64) >> 11 | (state & 134217728u64) << 3 | (state & 2048u64) << 8
             | (state & 4294967296u64) >> 9 | (state & 8388608u64) >> 19 | (state & 8u64) << 4;
    let p5 = (state & 512u64) << 21 | (state & 16u64) << 19 | (state & 34426863616u64) >> 14 | (state & 1073741824u64) >> 3
             | (state & 524288u64) >> 8 | (state & 8388608u64) << 9 | (state & 4096u64) >> 2 | (state & 16777216u64) << 2
             | (state & 68719476736u64) >> 22 | (state & 4195330u64) << 14 | (state & 1048576u64) >> 15
             | (state & 2097152u64) >> 20 | (state & 134217728u64) >> 21 | (state & 65536u64) << 15 | (state & 128u64) >> 4
             | (state & 1u64) << 22 | (state & 17213423616u64) >> 6 | (state & 2052u64) << 6 | (state & 8858370048u64) >> 26
             | (state & 262144u64) | (state & 264u64) << 26 | (state & 64u64) << 3 | (state & 2147483648u64) >> 11
             | (state & 32u64) << 11 | (state & 8192u64) >> 9 | (state & 131072u64) << 8 | (state & 4294967296u64) >> 19
             | (state & 536870912u64) << 4 | (state & 32768u64) << 20;
    let p6 = (state & 1073750016u64) >> 7 | (state & 34078720u64) >> 8 | (state & 8388672u64) << 7 | (state & 257u64) << 28
             | (state & 528u64) << 23 | (state & 2148532224u64) >> 15 | (state & 4194308u64) << 12 | (state & 34361835520u64) >> 20
             | (state & 65568u64) << 15 | (state & 4429185024u64) >> 23 | (state & 8589934592u64) >> 30
             | (state & 17179885568u64) >> 12 | (state & 553914496u64) | (state & 67108864u64) >> 16
             | (state & 68987912192u64) >> 28 | (state & 133120u64) << 8 | (state & 1024u64) << 16 | (state & 8u64) << 30
             | (state & 32770u64) << 20;
    min(min(min(state,p0), min(p1, p2)), min(min(p3, p4), min(p5, p6)))
}


fn equivalent_fields(state: State) -> [State; 8] {
    let mut n = [EMPTY_STATE; 8];
    n[0] = state;
    n[1] = (state & 532676608u64) >> 14 | (state & 7u64) << 34 | (state & 120259084288u64) >> 34 | (state & 32512u64) << 14
             | (state & 16642998272u64) >> 26 | (state & 4161536u64) | (state & 248u64) << 26;
    n[2] = (state & 73082081348u64) >> 2 | (state & 18270520337u64) << 2 | (state & 8725209216u64) >> 4 | (state & 270548992u64) >> 6
             | (state & 4227328u64) << 6 | (state & 36541040674u64) | (state & 545325576u64) << 4;
    n[3] = (state & 33554432u64) >> 14 | (state & 64u64) << 24 | (state & 16u64) << 28 | (state & 1073741824u64) >> 24
             | (state & 68719476736u64) >> 36 | (state & 131072u64) << 2 | (state & 34359738368u64) >> 34
             | (state & 4096u64) << 12 | (state & 268435456u64) >> 20 | (state & 1048576u64) >> 4 | (state & 17179869184u64) >> 32
             | (state & 128u64) << 22 | (state & 2097152u64) >> 6 | (state & 32768u64) << 6 | (state & 2147483648u64) >> 26
             | (state & 32u64) << 26 | (state & 4u64) << 32 | (state & 4294967296u64) >> 28 | (state & 256u64) << 20
             | (state & 4194304u64) >> 8 | (state & 2u64) << 34 | (state & 134217728u64) >> 18 | (state & 512u64) << 18
             | (state & 8388608u64) >> 10 | (state & 524288u64) >> 2 | (state & 8192u64) << 10 | (state & 2048u64) << 14
             | (state & 536870912u64) >> 22 | (state & 8589934592u64) >> 30 | (state & 1u64) << 36 | (state & 16777216u64) >> 12
             | (state & 67108864u64) >> 16 | (state & 262144u64) | (state & 16384u64) << 8 | (state & 1024u64) << 16
             | (state & 8u64) << 30 | (state & 65536u64) << 4;
    n[4] = (state & 8256u64) << 17 | (state & 68719476992u64) >> 8 | (state & 34359771136u64) >> 14 | (state & 4294967808u64) >> 5
             | (state & 134217744u64) << 5 | (state & 536870912u64) >> 22 | (state & 2097154u64) << 14
             | (state & 4096u64) << 12 | (state & 17184063488u64) >> 20 | (state & 1082130432u64) >> 17
             | (state & 128u64) << 22 | (state & 16777216u64) >> 12 | (state & 33685504u64) >> 6 | (state & 526336u64) << 6
             | (state & 8657306632u64) | (state & 2147549184u64) >> 11 | (state & 1048608u64) << 11 | (state & 268435457u64) << 8
             | (state & 16388u64) << 20;
    n[5] = (state & 8192u64) << 19 | (state & 64u64) << 21 | (state & 68736286720u64) >> 14 | (state & 16u64) << 9
             | (state & 1024u64) << 2 | (state & 2147483648u64) >> 15 | (state & 34359738368u64) >> 20
             | (state & 32u64) << 15 | (state & 16384u64) << 22 | (state & 8589934592u64) >> 4 | (state & 131328u64) >> 6
             | (state & 268959744u64) << 6 | (state & 17716740096u64) >> 26 | (state & 132u64) << 26
             | (state & 1048576u64) << 11 | (state & 2u64) << 20 | (state & 33554432u64) >> 8 | (state & 512u64) >> 3
             | (state & 67108864u64) >> 2 | (state & 4194304u64) >> 22 | (state & 2101249u64) << 14 | (state & 1073741824u64) >> 21
             | (state & 262144u64) | (state & 65536u64) >> 11 | (state & 134217728u64) << 3 | (state & 2048u64) << 8
             | (state & 4294967296u64) >> 9 | (state & 8388608u64) >> 19 | (state & 8u64) << 4;
    n[6] = (state & 512u64) << 21 | (state & 16u64) << 19 | (state & 34426863616u64) >> 14 | (state & 1073741824u64) >> 3
             | (state & 524288u64) >> 8 | (state & 8388608u64) << 9 | (state & 4096u64) >> 2 | (state & 16777216u64) << 2
             | (state & 68719476736u64) >> 22 | (state & 4195330u64) << 14 | (state & 1048576u64) >> 15
             | (state & 2097152u64) >> 20 | (state & 134217728u64) >> 21 | (state & 65536u64) << 15 | (state & 128u64) >> 4
             | (state & 1u64) << 22 | (state & 17213423616u64) >> 6 | (state & 2052u64) << 6 | (state & 8858370048u64) >> 26
             | (state & 262144u64) | (state & 264u64) << 26 | (state & 64u64) << 3 | (state & 2147483648u64) >> 11
             | (state & 32u64) << 11 | (state & 8192u64) >> 9 | (state & 131072u64) << 8 | (state & 4294967296u64) >> 19
             | (state & 536870912u64) << 4 | (state & 32768u64) << 20;
    n[7] = (state & 1073750016u64) >> 7 | (state & 34078720u64) >> 8 | (state & 8388672u64) << 7 | (state & 257u64) << 28
             | (state & 528u64) << 23 | (state & 2148532224u64) >> 15 | (state & 4194308u64) << 12 | (state & 34361835520u64) >> 20
             | (state & 65568u64) << 15 | (state & 4429185024u64) >> 23 | (state & 8589934592u64) >> 30
             | (state & 17179885568u64) >> 12 | (state & 553914496u64) | (state & 67108864u64) >> 16
             | (state & 68987912192u64) >> 28 | (state & 133120u64) << 8 | (state & 1024u64) << 16 | (state & 8u64) << 30
             | (state & 32770u64) << 20;
    n
}
}

//Name: Holes15
pub struct Holes15Board;
impl Board for Holes15Board {
const PEGS: usize = 15;
const SIZE: usize = 18;
const MOVEMASK: &'static [State] = &[26624u64, 20992u64, 10496u64, 9280u64, 5248u64, 4640u64, 3584u64, 
                            2320u64, 2180u64, 1160u64, 1090u64, 580u64, 545u64, 448u64, 224u64, 28u64, 
                            14u64, 7u64];
const CHECKMASK1: &'static [State] = &[24576u64, 20480u64, 10240u64, 9216u64, 5120u64, 4608u64, 3072u64, 
                            2304u64, 2176u64, 1152u64, 1088u64, 576u64, 544u64, 384u64, 192u64, 24u64, 
                            12u64, 6u64];
const CHECKMASK2: &'static [State] = &[10240u64, 4608u64, 2304u64, 1088u64, 1152u64, 544u64, 1536u64, 
                            272u64, 132u64, 136u64, 66u64, 68u64, 33u64, 192u64, 96u64, 12u64, 6u64, 
                            3u64];

fn normalize(state: State) -> State {
    let p0 = (state & 4096u64) >> 7 | (state & 16384u64) >> 14 | (state & 256u64) >> 5 | (state & 32u64) << 7 | (state & 4u64) << 9
             | (state & 8u64) << 5 | (state & 2u64) << 12 | (state & 1u64) << 14 | (state & 1024u64) >> 4
             | (state & 8192u64) >> 12 | (state & 656u64) | (state & 2048u64) >> 9 | (state & 64u64) << 4;
   p0
}


fn equivalent_fields(state: State) -> [State; 8] {
    let mut n = [EMPTY_STATE; 8];
    n[0] = state;
    n[1] = (state & 4096u64) >> 7 | (state & 16384u64) >> 14 | (state & 256u64) >> 5 | (state & 32u64) << 7 | (state & 4u64) << 9
             | (state & 8u64) << 5 | (state & 2u64) << 12 | (state & 1u64) << 14 | (state & 1024u64) >> 4
             | (state & 8192u64) >> 12 | (state & 656u64) | (state & 2048u64) >> 9 | (state & 64u64) << 4;
    n
}
}

